Package frank;

Helpers
 digito         = ['0' .. '9'];
 espaco         = ' ';
 rc             = 13;
 nl             = 10;
 tb             = 9;
 letraminuscula = ['a' .. 'z'];
 letramaiuscula = ['A' .. 'Z'];
 letra          = (letraminuscula | letramaiuscula);
 underline      = '_';
 all_char       = [0 .. 254];
 letra_hexa     = (['a'..'f'] | ['A'..'F']);
 not_star       = [all_char-'*'];
 not_star_slash = [not_star-'/'];
 
Tokens
 number_decimal = digito+;
 number_real    = digito+'.'digito+;
 number_hexa    = '0''x'(digito | letra_hexa)+; 
 plus           = '+';
 minus          = '-';
 mult           = '*';
 div            = '/';
 mod            = '%';
 
 atribuicao     = ':''=';
 menor          = '<';
 igual          = '=';
 not            = '!';
 and            = 'a''n''d';
 or             = 'o''r';
 true			= 't''r''u''e';
 false 			= 'f''a''l''s''e';
 
 vert_bar 	    = '|';
 l_par          = '(';
 r_par          = ')';
 virgula        = ',';
 final_linha    = ';';
 l_col          = '[';
 r_col          = ']';
 l_chaves       = '{';
 r_chaves       = '}';
 
 blank          = (espaco | rc | nl | tb)+;
 if             = 'i''f';
 then           = 't''h''e''n';
 else           = 'e''l''s''e';
 while          = 'w''h''i''l''e';
 
 int            = 'i''n''t';
 bool           = 'b''o''o''l';
 real           = 'r''e''a''l';
 function       = 'f''u''n''c''t''i''o''n';
 procedure      = 'p''r''o''c''e''d''u''r''e';
 print		    = 'p''r''i''n''t';
 size		    = 's''i''z''e';
 read		    = 'r''e''a''d';
 
 var            = 'v''a''r';
 cons           = 'c''o''n''s';
 
 identificador  = (underline | letra)(underline | letra | digito)*;
 
 comment_block  = '/''*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
 comment_line   = '/''/' [all_char - ['/'+nl]]* nl;
 

Ignored Tokens
 blank,
 comment_block,
 comment_line;

Productions

 programa           = {decs}     dec_var_const* dec_proc_fun*;
 dec_var_const      = {variavel} dec_var 
			        | {const}    dec_const;
 
 dec_var            = {dec} var declaracao;
 
 dec_const          = {constante} cons declaracao;
 
 declaracao         = {declaracao} tipo id_inicializacao outras_declaracoes* final_linha;

 outras_declaracoes = {varios} virgula id_inicializacao;

 id_inicializacao   = {id}      identificador 
                    | {inicial} inicializacao;
 
 inicializacao      = {inicializacao} identificador atribuicao tipo_exp;
  
 tipo_exp           = {expressao}  exp 
                    | {array_ext}  array_ext 
		            | {array_comp} array_comp;
 
 array_ext          = {arraye}   l_col exp seq_array_ext* r_col;
 seq_array_ext      = {seqarray} virgula exp;

 array_comp         = {arrayc}      l_col identificador vert_bar exp        r_col
                    | {multiarrayc} l_col identificador vert_bar array_comp r_col;
 
 tipo               = {tipobase}     tipo_base 
                    | {tipocomposto} tipo_base l_col cal_exp r_col;
 
 tipo_base          = {inteiro} int 
                    | {real}    real 
		            | {boleano} bool;
 			 	
 dec_proc_fun       = {proc} dec_proc 
                    | {fun}  dec_fun;

 dec_proc           = procedure identificador l_par parametros r_par comando;

 dec_fun            = function tipo identificador l_par parametros r_par exp;
 
 parametros         = {vazio} 
                    | {parametros} parametro outros_parametros*;

 outros_parametros  = virgula parametro;  

 parametro          = l_col var r_col tipo_parametro identificador;
 
 tipo_parametro     = {tipobase}       tipo_base 
                    | {tipo_parametro} tipo_parametro l_col r_col; 
  
 bloco              = l_chaves dec_var_const* comando r_chaves;
 
 numeral            = {int}  number_decimal 
                    | {real} number_real 
		            | {hexa} number_hexa;

 variavel = {variavelid}  identificador
          | {variavelexp} variavel l_col exp r_col;
 
 exp       = {chamda} chamada 
           | {menos} minus exp 
           | {bloco_exp} bloco_exp 
           | {expcalculo} cal_exp
           | {var} var
           | {cond_ternaria} if l_par cal_exp r_par then cond2;
 
 cond2 = {cond2} cal_exp else cond3;
 cond3 = {cond3} cal_exp;  
 
 bloco_exp = l_chaves dec_const* exp r_chaves;
 
 //Vou colocar como padrão todos q a producao principal(neste caso cal_exp) é dependente dois espaço a mais pra dentro
 cal_exp   = {soma_recursao} cal_exp soma termo 
	       | {termo_base}    termo;
   termo     = {termo_recursao} termo mult_div fator 
           | {fator_base}     fator;
   fator   = {com_parentes} l_par cal_exp r_par 
	       | {numero} numeral
	       | {bool_exp} bool_exp;
	       
   mult_div = {vezes} mult 
           | {divisao} div 
	       | {modulo}  mod;
   soma     = {mais}  plus 
	       | {menor} minus;
 
 comparison   = {igual} igual | {menor} menor; 
 bool_exp     = {compare_exp} bool_exp comparison bool_exp2 
 			  | {bool_exp2} bool_exp2; 
 	
   bool_exp2  = {or_recursao} bool_exp2 or termo_bool
 			  | {termo_bool_base} termo_bool;
   termo_bool = {termo_bool_recursao} termo_bool and neg 
   			  | {neg_base} neg;
   neg        = {com_negacao} not fator_bool
   			  | {sem_negacao} fator_bool;
   fator_bool = 
   			   {verdade} true
   			  | {falso} false
   			  | {id} identificador;
 
 
 chamada   = {chamada} identificador l_par lista_exp r_par;
 
 lista_exp = {lista} 
 			 | {lista_virgula} exp virgula_exp*;
 	virgula_exp = {virgula_exp} virgula exp;	  
 
 
 comando   = {while} while l_par cal_exp r_par comando 
  			 | {atribuicao} var atribuicao cal_exp
  			 | {chamada_comando} chamada final_linha
 			 | {bloco} bloco;  
 			 //| {condicional} condicional;
 
